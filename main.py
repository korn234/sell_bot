import discord
import random
import requests
import os
from discord.ext import commands, tasks
from discord import app_commands
from discord.ui import Button, View, Select
import threading
import asyncio

TOKEN = os.getenv("DISCORD_TOKEN")
SEASON_CHANNEL_ID = 1304398097421434930  # ‡∏ä‡πà‡∏≠‡∏á‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô
DAILY_CHANNEL_ID = 1357307785833873589   # ‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
STATUS_CHANNEL_ID = 1339360776095531078

intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
intents.guilds = True
intents.members = True  # ‡πÄ‡∏û‡∏¥‡πà‡∏° intents ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
bot = commands.Bot(command_prefix="!", intents=intents)
# ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà QR ‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ 1:1
SEASON_PAYMENT_PAIRS = {
    "https://media.discordapp.net/attachments/1234805355188326432/1357251880035811329/IMG_7559.png":
    "080-781-8346",
    "https://media.discordapp.net/attachments/1234805355188326432/1357251970879983717/S__18849802.jpg":
    "095-746-4287",
    "https://media.discordapp.net/attachments/1357575468764762202/1357575512066625669/IMG_0230.jpg":
    "094-338-9674"
}

DAILY_PAYMENT_PAIRS = {
    "https://media.discordapp.net/attachments/1357027765794373642/1357323518127247501/New_Project_404_7B9F1CE.png?ex=67efc988&is=67ee7808&hm=c53f3c099338c8d36487fbbd075e3fdb674a3323b33c04e523be36e67fa9cce9&=&format=webp&quality=lossless&width=791&height=989": "097-206-0458"
}

#Keys System
season_keys = {
    "1 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô": ["DoDEE \nFullFuntion", "DoDEE \nFullFuntion", "DoDEE \nFullFuntion", "DoDEE \nFullFuntion", "DoDEE \nFullFuntion", "DoDEE \nFullFuntion"],
    "3 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô": ["DoDEE \nFullFuntion", "DoDEE \nFullFuntion", "DoDEE \nFullFuntion", "DoDEE \nFullFuntion", "DoDEE \nFullFuntion"],
    "‡∏ñ‡∏≤‡∏ß‡∏£": ["DoDEE \nFullFuntion", "DoDEE \nFullFuntion", "DoDEE \nFullFuntion", "DoDEE \nFullFuntion", "DoDEE \nFullFuntion"]
}

daily_keys = {
    "3 ‡∏ß‡∏±‡∏ô": ["iluvusavage-DYNAMIC-ALL-D4xYqH0sWkFNKgBU", "iluvusavage-DYNAMIC-ALL-GIsYWEZgp14n0x69", "iluvusavage-DYNAMIC-ALL-rjq1mdKkhv6R8SoB", "iluvusavage-DYNAMIC-ALL-iz0a6rOq2SAd8H3Y", "iluvusavage-DYNAMIC-ALL-ug8hlnosvXrpftxO"],
    "15 ‡∏ß‡∏±‡∏ô": ["iluvusavage-DYNAMIC-ALL-zKF9Bo6UL2NnCgpY", "iluvusavage-DYNAMIC-ALL-8itU4oygCZejrHJV", "iluvusavage-DYNAMIC-ALL-zIh5osZfWBXOjAYJ", "iluvusavage-DYNAMIC-ALL-DHGzKafxvAVdSi0w", "iluvusavage-DYNAMIC-ALL-CsLzqilj3PIhGHSw"],
    "30 ‡∏ß‡∏±‡∏ô": ["iluvusavage-DYNAMIC-ALL-ObomMdlT6nH5WKCe", "iluvusavage-DYNAMIC-ALL-2RNeEP54Yd7WCFaV", "iluvusavage-DYNAMIC-ALL-9wf2tb1ChrWl6HFU", "iluvusavage-DYNAMIC-ALL-tWaIhDNURSxFKmyX", "iluvusavage-DYNAMIC-ALL-La5HyEgBop8w2X4u"],
    "‡∏ñ‡∏≤‡∏ß‡∏£": ["iluvusavage-DYNAMIC-ALL-gvPVOitMrR5yJlAw", "iluvusavage-DYNAMIC-ALL-VClF86O2aK5qGRLU", "iluvusavage-DYNAMIC-ALL-DniJmksRLK2hbeMF", "iluvusavage-DYNAMIC-ALL-0nchdDy1pXVwTqiS", "iluvusavage-DYNAMIC-ALL-0zQEgLfkdRv3OAZS"]
}

def get_next_key(duration):
    if duration in daily_keys and daily_keys[duration]:
        if len(daily_keys[duration]) <= 3:  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢
            notification_channel = bot.get_channel(1357308234137866370)
            if notification_channel:
                asyncio.create_task(notification_channel.send(f"‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏µ‡∏¢‡πå {duration} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢ ({len(daily_keys[duration])} ‡∏Ñ‡∏µ‡∏¢‡πå)"))
        return daily_keys[duration].pop(0)
    elif duration in season_keys and season_keys[duration]:
        if len(season_keys[duration]) <= 3:
            notification_channel = bot.get_channel(1357308234137866370)
            if notification_channel:
                asyncio.create_task(notification_channel.send(f"‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏µ‡∏¢‡πå {duration} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢ ({len(season_keys[duration])} ‡∏Ñ‡∏µ‡∏¢‡πå)"))
        return season_keys[duration].pop(0)
    return None


# ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡πÅ‡∏ä‡∏ó
class CloseButton(discord.ui.Button):

    def __init__(self):
        super().__init__(label="‚ùå ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó", style=discord.ButtonStyle.red)

    async def callback(self, interaction: discord.Interaction):
        if isinstance(interaction.channel, discord.TextChannel):
            await interaction.channel.delete()


# Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
class ConfirmView(View):

    def __init__(self, price: int, duration: str):
        super().__init__()
        self.price = price
        self.duration = duration
        self.status_message = None

    async def update_status(self, interaction: discord.Interaction, status: str, color: discord.Color):
        embed = discord.Embed(
            title="üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
            description=status,
            color=color
        )
        if self.status_message:
            await self.status_message.edit(embed=embed)
        else:
            self.status_message = await interaction.channel.send(embed=embed)

    @discord.ui.button(label="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Create private channel
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            interaction.guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }

        # Add admin role permissions if it exists
        admin_role = discord.utils.get(interaction.guild.roles, name="Admin")
        if admin_role:
            overwrites[admin_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)

        channel_name = f"order-{interaction.user.name}"
        channel = await interaction.guild.create_text_channel(channel_name, overwrites=overwrites, topic=f"Order: {self.duration} - {self.price} ‡∏ö‡∏≤‡∏ó")

        await interaction.response.send_message(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà {channel.mention}", ephemeral=True)

        # ‡∏™‡∏∏‡πà‡∏° QR code ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ß‡∏≠‡πÄ‡∏•‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        if self.duration in ["3 ‡∏ß‡∏±‡∏ô", "15 ‡∏ß‡∏±‡∏ô", "30 ‡∏ß‡∏±‡∏ô", "‡∏ñ‡∏≤‡∏ß‡∏£"] and self.price in [99, 190, 300, 799]:  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
            qr_url = random.choice(list(DAILY_PAYMENT_PAIRS.keys()))
            phone = DAILY_PAYMENT_PAIRS[qr_url]
        else:  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô
            qr_url = random.choice(list(SEASON_PAYMENT_PAIRS.keys()))
            phone = SEASON_PAYMENT_PAIRS[qr_url]

        embed = discord.Embed(
            title="üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
            description=f"üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ {interaction.user.mention}!\n"
                        f"üõí ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {self.duration}\n"
                        f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {self.price} ‡∏ö‡∏≤‡∏ó\n"
                        f"üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ß‡∏≠‡πÄ‡∏•‡∏ó: {phone}\n\n"
                        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
            color=discord.Color.blue())
        embed.set_image(url=qr_url)

        class ConfirmPaymentView(View):

            def __init__(self, price, duration):
                super().__init__()
                self.price = price
                self.duration = duration

            @discord.ui.button(label="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", style=discord.ButtonStyle.green)
            async def confirm_payment(self, interaction: discord.Interaction, button: discord.ui.Button):
                await self.view.update_status(interaction, "‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...", discord.Color.gold())
                def check_payment(message):
                    return message.author == interaction.user and message.channel == interaction.channel and message.attachments

                await interaction.response.send_message("üìé ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ", ephemeral=True)

                try:
                    payment_msg = await bot.wait_for('message', check=check_payment, timeout=300)
                    if not payment_msg.attachments:
                        await self.view.update_status(interaction, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", discord.Color.red())
                        return
                except TimeoutError:
                    await self.view.update_status(interaction, "‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà", discord.Color.red())
                    return

                # Logic for assigning roles and sending product details
                # Your existing code for processing payment and sending product keys
                await interaction.user.send(embed=product_embed)

            @discord.ui.button(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", style=discord.ButtonStyle.red)
            async def cancel_payment(self, interaction: discord.Interaction, button: discord.ui.Button):
                await self.view.update_status(interaction, "üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß", discord.Color.red())
                await interaction.response.send_message("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
                await asyncio.sleep(5)
                if isinstance(interaction.channel, discord.TextChannel):
                    await interaction.channel.delete()

        confirm_view = ConfirmPaymentView(self.price, self.duration)
        confirm_view.view = self  # Assign self to the inner view for access to update_status
        confirm_view.add_item(CloseButton())
        await channel.send(embed=embed, view=confirm_view)

        # Send payment instruction message
        payment_instruction = discord.Embed(
            title="üí≥ ‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
            description=f"üôè {interaction.user.mention} ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö\n"
                        "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß '‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô' ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            color=discord.Color.green())
        await channel.send(embed=payment_instruction)

    @discord.ui.button(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)


# View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô
class SeasonPriceDropdown(Select):

    def __init__(self):
        options = [
            discord.SelectOption(label="1 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô", description="‡∏£‡∏≤‡∏Ñ‡∏≤ 150 ‡∏ö‡∏≤‡∏ó", emoji="üí∞"),
            discord.SelectOption(label="3 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô", description="‡∏£‡∏≤‡∏Ñ‡∏≤ 300 ‡∏ö‡∏≤‡∏ó", emoji="üí∞"),
            discord.SelectOption(label="‡∏ñ‡∏≤‡∏ß‡∏£", description="‡∏£‡∏≤‡∏Ñ‡∏≤ 400 ‡∏ö‡∏≤‡∏ó", emoji="üî•"),
        ]
        super().__init__(placeholder="üíµ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£...", options=options, custom_id="select_season_price")

    async def callback(self, interaction: discord.Interaction):
        selection = self.values[0]
        if selection == "1 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô":
            price = 150
            duration = "1 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô"
        elif selection == "3 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô":
            price = 300
            duration = "3 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô"
        else:
            price = 400
            duration = "‡∏ñ‡∏≤‡∏ß‡∏£"

        embed = discord.Embed(title="üõí ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", description=f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {price} ‡∏ö‡∏≤‡∏ó\n‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {duration}", color=discord.Color.blue())
        view = ConfirmView(price, duration)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


# View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
class DailyPriceDropdown(Select):

    def __init__(self):
        options = [
            discord.SelectOption(label="3 ‡∏ß‡∏±‡∏ô", description="‡∏£‡∏≤‡∏Ñ‡∏≤ 99 ‡∏ö‡∏≤‡∏ó", emoji="üí∞"),
            discord.SelectOption(label="15 ‡∏ß‡∏±‡∏ô", description="‡∏£‡∏≤‡∏Ñ‡∏≤ 190 ‡∏ö‡∏≤‡∏ó", emoji="üí∞"),
            discord.SelectOption(label="30 ‡∏ß‡∏±‡∏ô", description="‡∏£‡∏≤‡∏Ñ‡∏≤ 300 ‡∏ö‡∏≤‡∏ó", emoji="üí∞"),
            discord.SelectOption(label="‡∏ñ‡∏≤‡∏ß‡∏£", description="‡∏£‡∏≤‡∏Ñ‡∏≤ 799 ‡∏ö‡∏≤‡∏ó", emoji="üî•"),
        ]
        super().__init__(placeholder="üíµ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£...", options=options, custom_id="select_daily_price")

    async def callback(self, interaction: discord.Interaction):
        selection = self.values[0]
        if selection == "3 ‡∏ß‡∏±‡∏ô":
            price = 99
            duration = "3 ‡∏ß‡∏±‡∏ô"
        elif selection == "15 ‡∏ß‡∏±‡∏ô":
            price = 190
            duration = "15 ‡∏ß‡∏±‡∏ô"
        elif selection == "30 ‡∏ß‡∏±‡∏ô":
            price = 300
            duration = "30 ‡∏ß‡∏±‡∏ô"
        else:
            price = 799
            duration = "‡∏ñ‡∏≤‡∏ß‡∏£"

        embed = discord.Embed(title="üõí ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", description=f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {price} ‡∏ö‡∏≤‡∏ó\n‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {duration}", color=discord.Color.blue())
        view = ConfirmView(price, duration)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class AdminContactButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="üë®‚Äçüíº ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", style=discord.ButtonStyle.primary)

    async def callback(self, interaction: discord.Interaction):
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            interaction.guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }

        admin_role = discord.utils.get(interaction.guild.roles, name="Admin")
        if admin_role:
            overwrites[admin_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)

        channel_name = f"support-{interaction.user.name}"
        channel = await interaction.guild.create_text_channel(channel_name, overwrites=overwrites)

        embed = discord.Embed(
            title="üì¨ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
            description="‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà",
            color=discord.Color.blue())
        await channel.send(embed=embed)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° "‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó"
        close_button = CloseButton()
        await channel.send("üîí ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á", view=View().add_item(close_button))

        await interaction.response.send_message(f"üì¨ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà {channel.mention}", ephemeral=True)

class SeasonView(View):
    def __init__(self):
        super().__init__()
        self.add_item(SeasonPriceDropdown())
        self.add_item(AdminContactButton())

class DailyView(View):
    def __init__(self):
        super().__init__()
        self.add_item(DailyPriceDropdown())
        self.add_item(AdminContactButton())

@bot.event
async def on_ready():
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó {bot.user} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} command(s)")
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {e}")

    clear_and_post.start()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
async def clear_channels():
    channels = [
        bot.get_channel(DAILY_CHANNEL_ID),
        bot.get_channel(SEASON_CHANNEL_ID),
        bot.get_channel(STATUS_CHANNEL_ID),
    ]

    for channel in channels:
        if channel:
            try:
                await channel.purge()
                print(f"‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô {channel.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            except Exception as e:
                print(f"‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô {channel.name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
async def post_messages():
    status_channel = bot.get_channel(STATUS_CHANNEL_ID)
    if status_channel:
        try:
            response = requests.get('http://0.0.0.0:5000/')
            status = "üü¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥" if response.status_code == 200 else "üî¥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
            await bot.change_presence(status=discord.Status.online if response.status_code == 200 else discord.Status.dnd, activity=discord.Game(name=status))
            if response.status_code != 200:
                await status_channel.send("‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        except Exception as e:
            await status_channel.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {str(e)}")

        status_message = ("```ini\n"
                          "[ üéÆ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏° üéÆ ]\n"
                          "```\n"
                          "**üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£**\n"
                          "```yaml\n"
                          "üü¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô   | ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥\n"
                          "üü° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç    | ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á\n"
                          "üî¥ ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô | ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á\n"
                          "```\n"
                          "**üì± ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°**\n"
                          "```css\n"
                          "‚Ä¢ ROV iOS (‡∏£‡∏≤‡∏¢‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô/‡∏ñ‡∏≤‡∏ß‡∏£)  üü°\n"
                          "‚Ä¢ ROV iOS (‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô/‡∏£‡∏≤‡∏¢‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô) üü¢\n"
                          "‚Ä¢ ROV Android           üü¢\n"
                          "‚Ä¢ Free Fire             üü¢\n"
                          "‚Ä¢ 8 Ball Pool           üü¢\n"
                          "```")
        await status_channel.send(status_message)

    daily_channel = bot.get_channel(DAILY_CHANNEL_ID)
    if daily_channel:
        embed1 = discord.Embed(
            title="‚öîÔ∏è ROV iOS PREMIUM SERVICES ‚öîÔ∏è",
            description=(
                "# üåü Premium Features\n"
                "> üéØ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏±‡∏î‡πÄ‡∏Å‡∏°‡∏ï‡∏≠‡∏ô‡∏à‡∏ö\n"
                "> üõ°Ô∏è ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ 100%\n"
                "> üì≤ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å\n"
                "> ‚ö° ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠\n"
                "> üî∞ ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏î‡∏π‡πÅ‡∏• 24/7\n\n"
                "# üíé ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô\n"
                "```md\n"
                "# 3 ‡∏ß‡∏±‡∏ô\n"
                "* ‡∏£‡∏≤‡∏Ñ‡∏≤ 99 ‡∏ö‡∏≤‡∏ó\n\n"
                "# 15 ‡∏ß‡∏±‡∏ô\n"
                "* ‡∏£‡∏≤‡∏Ñ‡∏≤ 190 ‡∏ö‡∏≤‡∏ó\n\n"
                "# 30 ‡∏ß‡∏±‡∏ô\n"
                "* ‡∏£‡∏≤‡∏Ñ‡∏≤ 300 ‡∏ö‡∏≤‡∏ó\n\n"
                "# ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£\n"
                "* ‡∏£‡∏≤‡∏Ñ‡∏≤ 799 ‡∏ö‡∏≤‡∏ó\n"
                "```"
            ),
            color=0x2ecc71
        )
        embed1.set_thumbnail(url="https://media.discordapp.net/attachments/1357027765794373642/1357330429429944493/New_Project_401_78BA78C.png")
        embed1.set_footer(text="‚ú® ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon_url="https://media.discordapp.net/attachments/1357027765794373642/1357330429429944493/New_Project_401_78BA78C.png")
        await daily_channel.send(embed=embed1, view=DailyView())

    season_channel = bot.get_channel(SEASON_CHANNEL_ID)
    if season_channel:
        embed2 = discord.Embed(
            title="‚öîÔ∏è ROV iOS PREMIUM SERVICES ‚öîÔ∏è",
            description=(
                "# üåü Premium Features\n"
                "> üõ°Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô\n"
                "> üì≤ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å\n"
                "> ‚ö° ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠\n"
                "> üî∞ ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏î‡∏π‡πÅ‡∏• 24/7\n\n"
                "# üíé ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏£‡∏≤‡∏¢‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô\n"
                "```md\n"
                "# 1 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô\n"
                "* ‡∏£‡∏≤‡∏Ñ‡∏≤ 150 ‡∏ö‡∏≤‡∏ó\n\n"
                "# 3 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô\n"
                "* ‡∏£‡∏≤‡∏Ñ‡∏≤ 300 ‡∏ö‡∏≤‡∏ó\n\n"
                "# ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£\n"
                "* ‡∏£‡∏≤‡∏Ñ‡∏≤ 400 ‡∏ö‡∏≤‡∏ó\n"
                "```"
            ),
            color=0x2ecc71
        )
        embed2.set_thumbnail(url="https://media.discordapp.net/attachments/1302103738164449413/1357013189438472262/5009BB7F-C798-46C8-BAAF-BAE91B9D7D1A.jpg")
        embed2.set_footer(text="‚ú® ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon_url="https://media.discordapp.net/attachments/1302103738164449413/1357013189438472262/5009BB7F-C798-46C8-BAAF-BAE91B9D7D1A.jpg")
        await season_channel.send(embed=embed2, view=SeasonView())

# Task ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 3 ‡∏ô‡∏≤‡∏ó‡∏µ
@tasks.loop(minutes=5)
async def clear_and_post():
    await clear_channels()
    await post_messages()

@bot.tree.command(name="add", description="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà (Admin only)")
@app_commands.choices(type=[
    app_commands.Choice(name="Day", value="day"),
    app_commands.Choice(name="Season", value="season")
])
@app_commands.choices(duration=[
    app_commands.Choice(name="3 ‡∏ß‡∏±‡∏ô", value="3 ‡∏ß‡∏±‡∏ô"),
    app_commands.Choice(name="15 ‡∏ß‡∏±‡∏ô", value="15 ‡∏ß‡∏±‡∏ô"),
    app_commands.Choice(name="30 ‡∏ß‡∏±‡∏ô", value="30 ‡∏ß‡∏±‡∏ô"),
    app_commands.Choice(name="‡∏ñ‡∏≤‡∏ß‡∏£", value="‡∏ñ‡∏≤‡∏ß‡∏£"),
    app_commands.Choice(name="1 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô", value="1 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô"),
    app_commands.Choice(name="3 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô", value="3 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô")
])
async def add_key(interaction: discord.Interaction, type: str, duration: str, key: str):
    if not any(role.name == "Admin" for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
        return

    if type == "day" and duration in daily_keys:
        daily_keys[duration].append(key)
        await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {duration} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
    elif type == "season" and duration in season_keys:
        season_keys[duration].append(key)
        await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {duration} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", ephemeral=True)

@bot.tree.command(name="remove", description="‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå (Admin only)")
@app_commands.choices(type=[
    app_commands.Choice(name="Day", value="day"),
    app_commands.Choice(name="Season", value="season")
])
@app_commands.choices(duration=[
    app_commands.Choice(name="3 ‡∏ß‡∏±‡∏ô", value="3 ‡∏ß‡∏±‡∏ô"),
    app_commands.Choice(name="15 ‡∏ß‡∏±‡∏ô", value="15 ‡∏ß‡∏±‡∏ô"),
    app_commands.Choice(name="30 ‡∏ß‡∏±‡∏ô", value="30 ‡∏ß‡∏±‡∏ô"),
    app_commands.Choice(name="‡∏ñ‡∏≤‡∏ß‡∏£", value="‡∏ñ‡∏≤‡∏ß‡∏£"),
    app_commands.Choice(name="1 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô", value="1 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô"),
    app_commands.Choice(name="3 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô", value="3 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô")
])
async def remove_key(interaction: discord.Interaction, type: str, duration: str, key: str):
    if not any(role.name == "Admin" for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
        return

    if type == "day" and duration in daily_keys and key in daily_keys[duration]:
        daily_keys[duration].remove(key)
        await interaction.response.send_message(f"‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {duration} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
    elif type == "season" and duration in season_keys and key in season_keys[duration]:
        season_keys[duration].remove(key)
        await interaction.response.send_message(f"‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {duration} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", ephemeral=True)

@bot.tree.command(name="list", description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin only)")
@app_commands.choices(type=[
    app_commands.Choice(name="Day", value="day"),
    app_commands.Choice(name="Season", value="season")
])
@app_commands.choices(duration=[
    app_commands.Choice(name="3 ‡∏ß‡∏±‡∏ô", value="3 ‡∏ß‡∏±‡∏ô"),
    app_commands.Choice(name="15 ‡∏ß‡∏±‡∏ô", value="15 ‡∏ß‡∏±‡∏ô"),
    app_commands.Choice(name="30 ‡∏ß‡∏±‡∏ô", value="30 ‡∏ß‡∏±‡∏ô"),
    app_commands.Choice(name="‡∏ñ‡∏≤‡∏ß‡∏£", value="‡∏ñ‡∏≤‡∏ß‡∏£"),
    app_commands.Choice(name="1 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô", value="1 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô"),
    app_commands.Choice(name="3 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô", value="3 ‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô")
])
async def list_keys(interaction: discord.Interaction, type: str, duration: str):
    if not any(role.name == "Admin" for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
        return

    if type == "day" and duration in daily_keys:
        keys = daily_keys[duration]
        await interaction.response.send_message(f"üîë ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {duration}:\n```\n" + "\n".join(keys) + "\n```", ephemeral=True)
    elif type == "season" and duration in season_keys:
        keys = season_keys[duration]
        await interaction.response.send_message(f"üîë ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {duration}:\n```\n" + "\n".join(keys) + "\n```", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", ephemeral=True)

@bot.command(name="announce")
@commands.has_role("Admin")
async def text_announce(ctx, *, message):
    """‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Admin only)"""
    await ctx.message.delete()
    embed = discord.Embed(
        title="üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®",
        description=message,
        color=discord.Color.blue()
    )
    embed.set_footer(text=f"‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÇ‡∏î‡∏¢ {ctx.author.name}")
    await ctx.send(embed=embed)

@bot.tree.command(name="announce", description="‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Admin only)")
async def slash_announce(interaction: discord.Interaction, message: str):
    if not any(role.name == "Admin" for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
        return

    embed = discord.Embed(
        title="üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®",
        description=message,
        color=discord.Color.blue()
    )
    embed.set_footer(text=f"‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÇ‡∏î‡∏¢ {interaction.user.name}")
    await interaction.response.send_message(embed=embed)

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    await bot.process_commands(message)

    # ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    faq = {
        "‡∏£‡∏≤‡∏Ñ‡∏≤": "üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à:\n- ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: 99-799 ‡∏ö‡∏≤‡∏ó\n- ‡∏£‡∏≤‡∏¢‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô: 150-400 ‡∏ö‡∏≤‡∏ó",
        "‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á": "üì± ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á:\n1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á DNS\n2. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏û\n3. ‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö",
        "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô": "üí≥ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:\n- True Wallet\n- ‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£",
        "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô": "üë®‚Äçüíº ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
    }

    for keyword, response in faq.items():
        if keyword in message.content.lower():
            await message.reply(response)
            break

    await bot.process_commands(message)

if __name__ == "__main__":
    from myserver import run_server
    import threading
    server_thread = threading.Thread(target=run_server)
    server_thread.start()
    bot.run(TOKEN)
